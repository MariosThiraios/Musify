@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Chat";
}

<div class="container">
    <h2 style="text-align:center">Live Chatroom</h2>
    <div class="row">
        <div id="chatform">
            <table id="discussion" class="fixed">
                
            </table>
            <div id="bubbles" hidden>someone is writing...</div>
            <div id="inputs">
                <input type="text" id="message" style="border-radius: 15px;"/>
                <img src="~/img/send.png" alt="send button" id="sendmessage" height="25px" width="25px">
                @*<i class="fa fa-paper-plane" aria-hidden="true" id="sendmessage"></i>*@
                
                @*<input type="button" id="sendmessage" value="Send" />*@
            </div>
            <input type="hidden" id="displayname" value="@User.Identity.GetUserName()" />
        </div>
    </div>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<tr><td><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</td></tr>');
            };
            chat.client.recieveNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<tr class="right"><td><strong>' + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + htmlEncode(name) +
                    '</strong>: ' + htmlEncode(message) + '</td></tr>');
            };
            chat.client.showWriting = function () {
                $('#bubbles').removeAttr("hidden");
            };
            chat.client.stopWriting = function () {
                $('#bubbles').attr("hidden", true);
            };
            // Set initial focus to message input box.
            //$('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $("#message").keyup(function () {
                    chat.server.write();
                });
                $("#message").keydown(function () {
                    chat.server.stopwrite();
                });

                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    chat.server.recieve($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                    chat.server.stopwrite();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}